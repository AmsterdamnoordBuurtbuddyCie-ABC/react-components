#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const execa = require('execa');
const bash = (cli) => execa.shell(cli, { shell: '/bin/bash' });

const ucFirst = (input) => {
    return input.charAt(0).toUpperCase() + input.slice(1);
};

const NO_EXPORT_FILES = [
    'manager', 'reducer', 'actions',
    'AddressStatus', 'countries', 'cardValidator'
];

const list = [
    {
        name: 'Dropdown',
        newName: 'From DropdownX to XDropdown'
    },
    {
        name: 'Href',
        newName: 'Link'
    },
    {
        name: 'AddressModal - EditAddressModal - UseAddressModal',
        newName: 'AddressesModal - EditAddressesModal - UseAddressesModal'
    },
    {
        name: 'AddressActions - AddressStatus - AddressesDomainsSelect',
        newName: 'AddressesActions - AddressesStatus - AddressesDomainsSelect'
    },
    {
        name: '* domains and * domain',
        newName: '----'
    },
    {
        name: '* invoices modals',
        newName: '----'
    },
    {
        name: 'SessionAction',
        newName: 'SessionsAction'
    }
];

console.log('Renamed', JSON.stringify(list, null, 2))

async function main() {
    const { stdout } = await bash("find {Components,Containers,context,helpers,hooks} -type f -name '*.js'");

    const getExport = ({ fileName, dir, filePath }, mode) => {

        const type = path.basename(dir);


        if (mode === 'containers' && type === 'modal') {
            const component = path.basename(path.resolve(dir, '..'));

            if (fileName === 'index') {
                return `${ucFirst(component)}Modal`;
            }

            return `${ucFirst(component)}${ucFirst(fileName)}Modal`;
        }

        // Custom Case
        if (fileName === 'SubTitle' || type === 'container') {
            return ucFirst(fileName);
        }

        // index === main module
        if (fileName === 'index' ) {
            return ucFirst(type);
        }

        if (fileName.startsWith('use')) {
            return fileName;
        }

        return `${ucFirst(type)}${ucFirst(fileName)}`;
    };

    const getConfig = (file) => {
        const fileName = path.basename(file, '.js');
        const dir = path.dirname(file);
        const filePath = path.join(dir, fileName);
        return { fileName, filePath, dir };
    };

    const isExportable = ({ fileName, filePath, dir }) => {

        if (fileName === 'AddressesSection') {
            const type = path.basename(dir);
            const test = type !== 'addresses';

            if (test) {
                console.log(`⚠ Broken name for ${filePath} you need to change it`);
                return false;
            }
        }

        if(['layouts'].includes(dir)) {
            return false;
        }

        // export only useX
        if (/helpers$/.test(dir)) {
            return fileName.startsWith('use');
        }

        const isExportable = !NO_EXPORT_FILES.includes(fileName);

        // Do not export Models are they are private or tests
        return isExportable && !/(\.test|Model)$/.test(fileName)
    };

    const makeExport = (config, mode) => {
        return `export { default as ${getExport(config, mode)} } from './${config.filePath}';`;
    };

    const content = stdout
        .split('\n')
        .reduce((acc, file) => {

            const [type = ''] = file.split(path.sep)
            const config = getConfig(file);

            if (isExportable(config)) {
                acc.push(makeExport(config, type.toLowerCase()));
            }
            return acc;
        }, [])
        .join('\n');

    fs.writeFileSync('index.js', content);
    console.log('✓ Export all the things.')
}

main();
